/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as IndexImport } from './routes/index'
import { Route as FilesIndexImport } from './routes/files.index'
import { Route as FilesFolderIdImport } from './routes/files.$folderId'
import { Route as FileNewImport } from './routes/file.new'
import { Route as FileFileIdImport } from './routes/file.$fileId'

// Create/Update Routes

const OnboardingRoute = OnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FilesIndexRoute = FilesIndexImport.update({
  id: '/files/',
  path: '/files/',
  getParentRoute: () => rootRoute,
} as any)

const FilesFolderIdRoute = FilesFolderIdImport.update({
  id: '/files/$folderId',
  path: '/files/$folderId',
  getParentRoute: () => rootRoute,
} as any)

const FileNewRoute = FileNewImport.update({
  id: '/file/new',
  path: '/file/new',
  getParentRoute: () => rootRoute,
} as any)

const FileFileIdRoute = FileFileIdImport.update({
  id: '/file/$fileId',
  path: '/file/$fileId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/file/$fileId': {
      id: '/file/$fileId'
      path: '/file/$fileId'
      fullPath: '/file/$fileId'
      preLoaderRoute: typeof FileFileIdImport
      parentRoute: typeof rootRoute
    }
    '/file/new': {
      id: '/file/new'
      path: '/file/new'
      fullPath: '/file/new'
      preLoaderRoute: typeof FileNewImport
      parentRoute: typeof rootRoute
    }
    '/files/$folderId': {
      id: '/files/$folderId'
      path: '/files/$folderId'
      fullPath: '/files/$folderId'
      preLoaderRoute: typeof FilesFolderIdImport
      parentRoute: typeof rootRoute
    }
    '/files/': {
      id: '/files/'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/onboarding': typeof OnboardingRoute
  '/file/$fileId': typeof FileFileIdRoute
  '/file/new': typeof FileNewRoute
  '/files/$folderId': typeof FilesFolderIdRoute
  '/files': typeof FilesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/onboarding': typeof OnboardingRoute
  '/file/$fileId': typeof FileFileIdRoute
  '/file/new': typeof FileNewRoute
  '/files/$folderId': typeof FilesFolderIdRoute
  '/files': typeof FilesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/onboarding': typeof OnboardingRoute
  '/file/$fileId': typeof FileFileIdRoute
  '/file/new': typeof FileNewRoute
  '/files/$folderId': typeof FilesFolderIdRoute
  '/files/': typeof FilesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/onboarding'
    | '/file/$fileId'
    | '/file/new'
    | '/files/$folderId'
    | '/files'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/onboarding'
    | '/file/$fileId'
    | '/file/new'
    | '/files/$folderId'
    | '/files'
  id:
    | '__root__'
    | '/'
    | '/onboarding'
    | '/file/$fileId'
    | '/file/new'
    | '/files/$folderId'
    | '/files/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OnboardingRoute: typeof OnboardingRoute
  FileFileIdRoute: typeof FileFileIdRoute
  FileNewRoute: typeof FileNewRoute
  FilesFolderIdRoute: typeof FilesFolderIdRoute
  FilesIndexRoute: typeof FilesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OnboardingRoute: OnboardingRoute,
  FileFileIdRoute: FileFileIdRoute,
  FileNewRoute: FileNewRoute,
  FilesFolderIdRoute: FilesFolderIdRoute,
  FilesIndexRoute: FilesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/onboarding",
        "/file/$fileId",
        "/file/new",
        "/files/$folderId",
        "/files/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/file/$fileId": {
      "filePath": "file.$fileId.tsx"
    },
    "/file/new": {
      "filePath": "file.new.tsx"
    },
    "/files/$folderId": {
      "filePath": "files.$folderId.tsx"
    },
    "/files/": {
      "filePath": "files.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
